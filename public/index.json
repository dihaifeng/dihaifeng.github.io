[{"categories":null,"content":"Helm 是 Kubernetes 界的瑞士军刀，一个强大的包管理工具，它让部署和管理 Kubernetes 应用程序变得前所未有的简单。它通过 Helm Chart（一组预先配置的 Kubernetes 资源）来实现这一目标。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:0:0","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"Helm工作流程 从这个架构图中，我们可以看到 Helm 如何与 Kubernetes 的各个组件协同工作，以便于部署和管理 Helm Charts。Helm 通过 Kubernetes API 与集群交互，使用 Helm CLI 来管理仓库中的 Charts，并通过 Releases 来跟踪和管理部署在 Kubernetes 集群上的应用程序。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:0","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"安装 Helm Helm 的安装非常简便，提供了多种方法以适应不同的操作系统和环境。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:2:0","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"脚本安装 [root@master ~]# curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 [root@master ~]# chmod 700 get_helm.sh [root@master ~]# ./get_helm.sh # 验证安装结果，查看helm版本 [root@master ~]# helm version version.BuildInfo{Version:\"v3.14.2\", GitCommit:\"c309b6f0ff63856811846ce18f3bdc93d2b4d54b\", GitTreeState:\"clean\", GoVersion:\"go1.21.7\"} ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:2:1","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"二进制安装 下载地址：https://github.com/helm/helm/releases # 下载二进制文件 [root@master ~]# wget https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz # 使用命令提取二进制文件 [root@master ~]# tar -zxvf helm-v3.14.2-linux-amd64.tar.gz [root@master ~]#mv linux-amd64/helm /usr/local/bin/helm ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:2:2","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"macOS 安装 brew install helm ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:2:3","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"创建 Helm Chart：快速入门 创建一个基本的 Helm Chart，只需几个命令即可开始。 [root@master ~]# helm create helloworld [root@master helloworld]# tree . ├── charts ├── Chart.yaml ├── templates │ ├── deployment.yaml │ ├── _helpers.tpl │ ├── hpa.yaml │ ├── ingress.yaml │ ├── NOTES.txt │ ├── serviceaccount.yaml │ ├── service.yaml │ └── tests │ └── test-connection.yaml └── values.yaml 3 directories, 10 files 这将在 helloworld 目录下生成一系列的文件和目录，包括 deployment.yaml 和 values.yaml 等，这些文件共同定义了部署的形态。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:3:0","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"定制 Helm Chart 定制 Helm Chart 常常涉及到修改 values.yaml 文件，如下所示： [root@master helloworld]# cat values.yaml ... service: type: NodePort # 默认为ClusterIP类型 port: 80 ... 通过这种方式，无需更改 Chart 的模板文件，就可以轻松调整部署的具体参数。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:3:1","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"部署 Helm Chart 部署一个 Helm Chart，可以使用以下命令： [root@master ~]# helm install myhelloworld helloworld NAME: myhelloworld LAST DEPLOYED: Tue Apr 23 10:07:31 2024 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: 1. Get the application URL by running these commands: export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services myhelloworld) export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") echo http://$NODE_IP:$NODE_PORT 这个命令会将 helloworld Chart 部署到 Kubernetes，并命名为 myhelloworld。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:3:2","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"跟踪和升级 Helm 部署 Helm 提供了全面的命令来跟踪和管理部署。 查看部署 [root@master ~]# helm list -a NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION myhelloworld default 1 2024-04-23 10:07:31.873730017 +0800 CST deployed helloworld-0.1.0 1.16.0 [root@master ~]# 获取服务信息 [root@master helloworld]# kubectl get svc myhelloworld NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE myhelloworld NodePort 10.99.133.63 \u003cnone\u003e 80:31814/TCP 14m 注意：NodePort 端口号范围在30000-32767内变化，因此可能会得到不同的NodePort。 集群IP + NodePort的端口31814，我们就可以访问 myhelloworld Helm Chart 的 Nginx 页面。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:3:3","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"管理 Helm Chart 仓库 在 Linux 发行版中，我们有 apt、yum、dnf 等包管理器；类似地，Helm 依赖于如 bitnami 这样的 Chart 仓库。Chart 开发者可以创建 YAML 配置文件，并将它们打包成 Charts，然后发布为 Chart 仓库。 例如 - 如果你想通过 Helm 仓库在 Kubernetes 集群中部署 Redis 内存缓存，你只需简单地运行以下命令： [root@master ~]# helm install redis bitnami/redis 注意： 上述命令将在 bitnami Chart 仓库中搜索 Redis Chart，然后将其安装到你的 Kubernetes 集群中。 Helm 提供了五个与仓库相关的命令，它们可以用于添加、列出、移除、更新和索引 Chart 仓库。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:0","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"添加仓库 [root@master linux-amd64]# helm repo add bitnami https://charts.bitnami.com/bitnami # 使用helm search返回bitnami存储库中可用的所有Charts [root@master linux-amd64]# helm search repo bitnami NAME CHART VERSION APP VERSION DESCRIPTION bitnami/airflow 13.0.0 2.3.3 Apache Airflow is a tool to express and execute... bitnami/apache 9.1.14 2.4.54 Apache HTTP Server is an open-source HTTP serve... bitnami/argo-cd 4.0.4 2.4.8 Argo CD is a continuous delivery tool for Kuber... bitnami/argo-workflows 2.3.7 3.3.8 Argo Workflows is meant to orchestrate Kubernet... bitnami/aspnet-core 3.4.16 6.0.7 ASP.NET Core is an open-source framework for we... bitnami/cassandra 9.2.9 4.0.5 Apache Cassandra is an open source distributed ... bitnami/cert-manager 0.7.5 1.9.1 Cert Manager is a Kubernetes add-on to automate... bitnami/common 1.16.1 1.16.0 A Library Helm Chart for grouping common logic ... ... ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:1","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"列出仓库 [root@master linux-amd64]# helm repo list NAME URL brigade https://brigadecore.github.io/charts bitnami https://charts.bitnami.com/bitnami hashicorp https://helm.releases.hashicorp.com nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/ harbor https://helm.goharbor.io stable http://mirror.azure.cn/kubernetes/charts/ ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:2","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"更新仓库 [root@master linux-amd64]# helm repo update Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \"harbor\" chart repository ...Successfully got an update from the \"hashicorp\" chart repository ...Successfully got an update from the \"stable\" chart repository ...Successfully got an update from the \"nfs-subdir-external-provisioner\" chart repository ...Successfully got an update from the \"bitnami\" chart repository ...Successfully got an update from the \"brigade\" chart repository Update Complete. ⎈Happy Helming!⎈ ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:3","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"生成索引文件 用于生成的索引文件，为Helm Chart仓库提供了一个包含所有可用 Charts 及其元数据的中央索引，从而使得用户能够搜索、解析依赖、管理版本，并安全高效地与仓库交互。 [root@master ~]# helm repo index helloworld [root@master ~]# cat helloworld/index.yaml apiVersion: v1 entries: {} generated: \"2024-04-23T11:17:42.043648173+08:00\" ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:4","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"删除Chart仓库 [root@master ~]# helm repo remove bitnami \"bitnami\" has been removed from your repositories 这些命令构建了 Helm 的仓库管理基础，允许用户轻松地在 Kubernetes 之上部署、扩展和管理复杂的应用程序集合。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:5","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"结语 通过本篇文章，我们深入探讨了 Helm 的工作机制、安装方法、Chart 创建和管理，以及 Helm Chart 仓库的使用。Helm 以其简洁、直接的方式，成为了管理 Kubernetes 应用程序不可或缺的工具。如果你是 Kubernetes 用户，Helm 绝对值得一试。 ","date":"2024-04-24","objectID":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:4:6","tags":null,"title":"Helm快速入门","uri":"/posts/kubernetes/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":["Liunx"],"content":"这次用下新工具smem，这是一个python写的小工具，可以统计系统中所有进程占用的物理内存RSS、以及去掉共享内存的PSS、以及程序本身的独占内存USS的情况。 # centos 下 yum install epel-release yum install smem python-matplotlib python-tk # ubuntu 下 apt-get install smem 常用命令： -k 带单位显示内存 [root@k8s haifeng18]# smem -k PID User Command Swap USS PSS RSS 270267 101 /usr/bin/dumb-init -- /ngin 0 64.0K 68.0K 72.0K 1372033 root runsv bird 0 72.0K 168.0K 1.2M 1372036 root runsv allocate-tunnel-addrs 0 68.0K 172.0K 1.3M 1372039 root runsv confd 0 72.0K 173.0K 1.3M 1372040 root runsv bird6 0 72.0K 176.0K 1.3M 1372037 root runsv felix 0 72.0K 179.0K 1.3M 1372038 root runsv cni 0 72.0K 179.0K 1.3M 1371662 root /usr/local/bin/runsvdir -P 0 100.0K 188.0K 1.2M -u -k 带单位显示每个用户的内存占用： [root@k8s haifeng18]# smem -u -k User Count Swap USS PSS RSS 65535 3 0 120.0K 695.0K 1.8M lldpd 1 0 540.0K 1.1M 2.9M nobody 1 0 1.1M 1.3M 5.1M rpc 1 0 1.3M 1.7M 5.8M dbus 2 0 1.6M 2.0M 7.5M haifeng18 2 0 2.0M 4.1M 11.1M -w -k 显示系统整体内存情况类似free [root@k8s haifeng18]# smem -w -k Area Used Cache Noncache firmware/hardware 0 0 0 kernel image 0 0 0 kernel dynamic memory 17.7G 14.8G 2.9G userspace memory 7.5G 1.5G 6.0G free memory 5.9G 5.9G 0 -k -s uss -r 按照uss的占用从大到小排序的方式展示内存的占用情况 非常实用 [root@k8s haifeng18]# smem -k -s uss -r PID User Command Swap USS PSS RSS 1216764 root /usr/bin/kube-apiserver --v 0 4.7G 4.7G 4.7G 1097 root /data0/prometheus/prometheu 0 642.0M 642.0M 642.0M 898 root /usr/bin/etcd --config-file 0 203.1M 203.1M 203.1M 1095 root /usr/share/grafana/bin/graf 0 195.0M 195.1M 196.9M 1037 root /usr/bin/consul agent -conf 0 138.7M 138.7M 138.7M USS(User State Size)：用户状态大小或者用户状态占用大小，是指一个进程实际占用的物理内存的大小，仅包括用户态的部分 PSS(Page Status Size)：页面状态大小或者页面状态占用大小，是指一个进程实际占用的物理内存的大小，包括数据和指令。PSS不仅包括用户态状态，还包括内核态状态 RSS(Real Memory Size)：实际内存使用量或者实际内存占用大小，是指一个进程实际占用的物理内存的大小，包括数据、代码、堆栈等各种类型的内存占用。 好了基本命令介绍完毕，那我们来看看如何查看内存是否泄漏吧，因为内存泄漏的程序占用的内存是一直再增加的（这不是废话嘛），这样我们就可以用上面的排序命令只观察上面几个进程了。 [root@k8s haifeng18]# watch smem -k -s uss -r Every 2.0s: smem -k -s uss -r k8s.wq.2.20.30: Tue Sep 12 16:35:49 2023 PID User Command Swap USS PSS RSS 1216764 root /usr/bin/kube-apiserver --v 0 4.7G 4.7G 4.7G 1097 root /data0/prometheus/prometheu 0 642.0M 642.0M 642.0M 898 root /usr/bin/etcd --config-file 0 203.1M 203.1M 203.1M 1095 root /usr/share/grafana/bin/graf 0 195.0M 195.1M 196.9M 1037 root /usr/bin/consul agent -conf 0 138.7M 138.7M 138.7M 小技巧，watch加在命令前面，5s执行一次命令，会高亮显示改变的部分。 ","date":"2023-10-23","objectID":"/posts/linux/smem/:0:0","tags":["Linux"],"title":"smem 排查内存泄露工具","uri":"/posts/linux/smem/"},{"categories":["Liunx"],"content":"nsenter是一个命令行工具，可以帮助用户进入指定的Linux命名空间。使用nsenter命令，用户可以进入指定的命名空间，并在其中执行命令。 ","date":"2023-07-04","objectID":"/posts/linux/nsenter/:0:0","tags":["Linux"],"title":"nsenter 使用","uri":"/posts/linux/nsenter/"},{"categories":["Liunx"],"content":"语法 使用nsenter命令的基本语法如下： nsenter [options] [\u003cpid\u003e|\u003cnetns\u003e] 其中，\u003cpid\u003e表示要进入的进程的PID，\u003cnetns\u003e表示要进入的网络命名空间的路径。常用的选项包括： -t, --target \u003cpid\u003e：指定要进入的进程PID。 -n, --net：进入网络命名空间。 -m, --mount：进入挂载命名空间。 -u, --uts：进入UTS命名空间。 -i, --ipc：进入IPC命名空间。 -p, --preserve-credentials：保留当前进程的用户和组标识。 ","date":"2023-07-04","objectID":"/posts/linux/nsenter/:1:0","tags":["Linux"],"title":"nsenter 使用","uri":"/posts/linux/nsenter/"},{"categories":["Liunx"],"content":"示例 例如，要进入PID为1234的进程的PID命名空间，可以使用以下命令： nsenter -t 1234 -m -u -i -n /bin/bash 该命令将进入PID为1234的进程的命名空间，并在其中启动一个新的bash shell。在该shell中执行的命令将在该命名空间中执行。 进入25722命名空间： nsenter -n -t 25722 ","date":"2023-07-04","objectID":"/posts/linux/nsenter/:2:0","tags":["Linux"],"title":"nsenter 使用","uri":"/posts/linux/nsenter/"}]